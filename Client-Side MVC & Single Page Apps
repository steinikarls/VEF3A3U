spurning a.

Hönnunar mynstur er MVC sem kom út árið 1979  frá Trygve Reenskaug þegar hann var að vinna við smalltalk-80, MVC er hönnununarmynstur sem er eins og arkitekt, Þú hefur 
Controller sem notandinn sendir fyrirspurn á sem virkjar Model sem tekur upplýsingarnar og vinnur úr þeim og birtir View fyrir notandann.


spurning b. 


The model directly manages the data, logic and rules of the application.
 A view can be any output representation of information, such as a chart or
 a diagram; multiple views of the same information are possible, such as
 a bar chart for management and a tabular view for accountants.
 The third part, the controller, accepts input and converts it to commands for
 the model or view


spurning c.

Client-Side MVC & Single Page Apps
Several studies have confirmed that improvements to latency can have a positive impact on the usage and user engagement of sites and apps. This is at odds with the traditional approach to web app development which is very server-centric, requiring a complete page reload to move from one page to the next. Even with heavy caching in place, the browser still has to parse the CSS, JavaScript, and HTML and render the interface to the screen.

In addition to resulting in a great deal of duplicated content being served back to the user, this approach affects both latency and the general responsiveness of the user experience. A trend to improve perceived latency in the past few years has been to move towards building Single Page Applications (SPAs) - apps which after an initial page load are able to handle subsequent navigations and requests for data without the need for a complete reload.

When a user navigates to a new view, additional content required for the view is requested using an XHR (XMLHttpRequest), typically communicating with a server-side REST API or endpoint. Ajax (Asynchronous JavaScript and XML) makes communication with the server asynchronous so that data is transferred and processed in the background, allowing the user to interact with other parts of a page without interruption. This improves usability and responsiveness.

SPAs can also take advantage of browser features like the History API to update the address seen in the location bar when moving from one view to another. These URLs also make it possible to bookmark and share a particular application state, without the need to navigate to completely new pages.

The typical SPA consists of smaller pieces of interface representing logical entities, all of which have their own UI, business logic and data. A good example is a basket in a shopping web application which can have items added to it. This basket might be presented to the user in a box in the top right corner of the page (see the picture below):